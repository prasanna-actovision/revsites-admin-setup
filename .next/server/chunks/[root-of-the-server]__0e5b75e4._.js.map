{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/lib/api.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\n/**\n * apiFetch - universal fetch for dev/prod that prefixes API calls with the correct base URL\n *\n * Usage:\n *   apiFetch('/users', { method: 'GET' })\n *   apiFetch('https://external.com/endpoint') // untouched\n */\nexport async function apiFetch(\n  input: string | Request,\n  init?: RequestInit,\n): Promise<Response> {\n  let url = input;\n\n  // If input is a string and is a relative API path, prefix with base URL\n  if (typeof input === 'string') {\n    if (input.startsWith('/api/')) {\n      // Remove leading slash to avoid double slashes\n      url =\n        process.env.NEXT_PUBLIC_BASE_PATH +\n        (input.startsWith('/') ? input : '/' + input);\n    }\n  }\n  // If input is a Request object, you could extend logic here if needed\n\n  return fetch(url as RequestInfo, init);\n}\n\nexport function getClientIP(request: NextRequest): string {\n  return (\n    request.headers.get('x-forwarded-for') ||\n    request.headers.get('x-real-ip') ||\n    //|| request.socket.remoteAddress\n    'unknown'\n  );\n}\n"],"names":[],"mappings":";;;;AASO,eAAe,SACpB,KAAuB,EACvB,IAAkB;IAElB,IAAI,MAAM;IAEV,wEAAwE;IACxE,IAAI,OAAO,UAAU,UAAU;QAC7B,IAAI,MAAM,UAAU,CAAC,UAAU;YAC7B,+CAA+C;YAC/C,MACE,6DACA,CAAC,MAAM,UAAU,CAAC,OAAO,QAAQ,MAAM,KAAK;QAChD;IACF;IACA,sEAAsE;IAEtE,OAAO,MAAM,KAAoB;AACnC;AAEO,SAAS,YAAY,OAAoB;IAC9C,OACE,QAAQ,OAAO,CAAC,GAAG,CAAC,sBACpB,QAAQ,OAAO,CAAC,GAAG,CAAC,gBACpB,iCAAiC;IACjC;AAEJ","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === 'development'\n        ? ['query', 'info', 'warn', 'error']\n        : [],\n  });\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCACI;QAAC;QAAS;QAAQ;QAAQ;KAAQ;AAE1C;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;uCAEe","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/services/system-log.ts"],"sourcesContent":["import { Prisma } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface SystemLogProps {\n  event: string;\n  userId: string;\n  entityId?: string;\n  entityType?: string;\n  description?: string;\n  ipAddress?: string;\n  meta?: string;\n}\n\nexport async function systemLog(\n  {\n    event,\n    userId,\n    entityId,\n    entityType,\n    description,\n    ipAddress,\n    meta,\n  }: SystemLogProps,\n  tx?: Prisma.TransactionClient, // Optional transaction\n) {\n  try {\n    // Use transaction if available, otherwise use Prisma client\n    const connection = tx ?? prisma;\n\n    await connection.systemLog.create({\n      data: {\n        event,\n        userId,\n        entityId,\n        entityType,\n        description,\n        ipAddress,\n        meta,\n      },\n    });\n  } catch (error) {\n    console.error('[LOG] Failed to log activity:', error);\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAYO,eAAe,UACpB,EACE,KAAK,EACL,MAAM,EACN,QAAQ,EACR,UAAU,EACV,WAAW,EACX,SAAS,EACT,IAAI,EACW,EACjB,EAA6B;IAE7B,IAAI;QACF,4DAA4D;QAC5D,MAAM,aAAa,MAAM,+GAAA,CAAA,SAAM;QAE/B,MAAM,WAAW,SAAS,CAAC,MAAM,CAAC;YAChC,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;IACjD;AACF","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/app/%28protected%29/user-management/settings/forms/notification-settings-schema.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const NotificationSettingsSchema = z.object({\n  notifyStockEmail: z.boolean(),\n  notifyStockWeb: z.boolean(),\n  notifyStockRoleIds: z.array(z.string()),\n  notifyNewOrderEmail: z.boolean(),\n  notifyNewOrderWeb: z.boolean(),\n  notifyNewOrderRoleIds: z.array(z.string()),\n  notifyOrderStatusUpdateEmail: z.boolean(),\n  notifyOrderStatusUpdateWeb: z.boolean(),\n  notifyOrderStatusUpdateRoleIds: z.array(z.string()),\n  notifyPaymentFailureEmail: z.boolean(),\n  notifyPaymentFailureWeb: z.boolean(),\n  notifyPaymentFailureRoleIds: z.array(z.string()),\n  notifySystemErrorFailureEmail: z.boolean(),\n  notifySystemErrorWeb: z.boolean(),\n  notifySystemErrorRoleIds: z.array(z.string()),\n});\n\nexport type NotificationSettingsSchemaType = z.infer<\n  typeof NotificationSettingsSchema\n>;\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,6BAA6B,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,kBAAkB,oKAAA,CAAA,IAAC,CAAC,OAAO;IAC3B,gBAAgB,oKAAA,CAAA,IAAC,CAAC,OAAO;IACzB,oBAAoB,oKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM;IACpC,qBAAqB,oKAAA,CAAA,IAAC,CAAC,OAAO;IAC9B,mBAAmB,oKAAA,CAAA,IAAC,CAAC,OAAO;IAC5B,uBAAuB,oKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM;IACvC,8BAA8B,oKAAA,CAAA,IAAC,CAAC,OAAO;IACvC,4BAA4B,oKAAA,CAAA,IAAC,CAAC,OAAO;IACrC,gCAAgC,oKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM;IAChD,2BAA2B,oKAAA,CAAA,IAAC,CAAC,OAAO;IACpC,yBAAyB,oKAAA,CAAA,IAAC,CAAC,OAAO;IAClC,6BAA6B,oKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM;IAC7C,+BAA+B,oKAAA,CAAA,IAAC,CAAC,OAAO;IACxC,sBAAsB,oKAAA,CAAA,IAAC,CAAC,OAAO;IAC/B,0BAA0B,oKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM;AAC5C","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/app/api/auth/%5B...nextauth%5D/auth-options.ts"],"sourcesContent":["import { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport bcrypt from 'bcrypt';\nimport { NextAuthOptions, Session, User } from 'next-auth';\nimport { JWT } from 'next-auth/jwt';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport GoogleProvider from 'next-auth/providers/google';\nimport prisma from '@/lib/prisma';\n\nconst authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n        rememberMe: { label: 'Remember me', type: 'boolean' },\n      },\n      async authorize(credentials) {\n        if (!credentials || !credentials.email || !credentials.password) {\n          throw new Error(\n            JSON.stringify({\n              code: 400,\n              message: 'Please enter both email and password.',\n            }),\n          );\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email },\n        });\n\n        if (!user) {\n          throw new Error(\n            JSON.stringify({\n              code: 404,\n              message: 'User not found. Please register first.',\n            }),\n          );\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password || '',\n        );\n\n        if (!isPasswordValid) {\n          throw new Error(\n            JSON.stringify({\n              code: 401,\n              message: 'Invalid credentials. Incorrect password.',\n            }),\n          );\n        }\n\n        if (user.status !== 'ACTIVE') {\n          throw new Error(\n            JSON.stringify({\n              code: 403,\n              message: 'Account not activated. Please verify your email.',\n            }),\n          );\n        }\n\n        // Update `lastSignInAt` field\n        await prisma.user.update({\n          where: { id: user.id },\n          data: { lastSignInAt: new Date() },\n        });\n\n        return {\n          id: user.id,\n          status: user.status,\n          email: user.email,\n          name: user.name || 'Anonymous',\n          roleId: user.roleId,\n          avatar: user.avatar,\n        };\n      },\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n      async profile(profile) {\n        const existingUser = await prisma.user.findUnique({\n          where: { email: profile.email },\n          include: {\n            role: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n          },\n        });\n\n        if (existingUser) {\n          // Update `lastSignInAt` field for existing users\n          await prisma.user.update({\n            where: { id: existingUser.id },\n            data: {\n              name: profile.name,\n              avatar: profile.picture || null,\n              lastSignInAt: new Date(),\n            },\n          });\n\n          return {\n            id: existingUser.id,\n            email: existingUser.email,\n            name: existingUser.name || 'Anonymous',\n            status: existingUser.status,\n            roleId: existingUser.roleId,\n            roleName: existingUser.role.name,\n            avatar: existingUser.avatar,\n          };\n        }\n\n        const defaultRole = await prisma.userRole.findFirst({\n          where: { isDefault: true },\n        });\n\n        if (!defaultRole) {\n          throw new Error(\n            'Default role not found. Unable to create a new user.',\n          );\n        }\n\n        // Create a new user and account\n        const newUser = await prisma.user.create({\n          data: {\n            email: profile.email,\n            name: profile.name,\n            password: '', // No password for OAuth users\n            avatar: profile.picture || null,\n            emailVerifiedAt: new Date(),\n            roleId: defaultRole.id,\n            status: 'ACTIVE',\n          },\n        });\n\n        return {\n          id: newUser.id,\n          email: newUser.email,\n          name: newUser.name || 'Anonymous',\n          status: newUser.status,\n          avatar: newUser.avatar,\n          roleId: newUser.roleId,\n          roleName: defaultRole.name,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 24 * 60 * 60,\n  },\n  callbacks: {\n    async jwt({\n      token,\n      user,\n      session,\n      trigger,\n    }: {\n      token: JWT;\n      user: User;\n      session?: Session;\n      trigger?: 'signIn' | 'signUp' | 'update';\n    }) {\n      if (trigger === 'update' && session?.user) {\n        token = session.user;\n      } else {\n        if (user && user.roleId) {\n          const role = await prisma.userRole.findUnique({\n            where: { id: user.roleId },\n          });\n\n          token.id = (user.id || token.sub) as string;\n          token.email = user.email;\n          token.name = user.name;\n          token.avatar = user.avatar;\n          token.status = user.status;\n          token.roleId = user.roleId;\n          token.roleName = role?.name;\n        }\n      }\n\n      return token;\n    },\n    async session({ session, token }: { session: Session; token: JWT }) {\n      if (session.user) {\n        session.user.id = token.id;\n        session.user.email = token.email;\n        session.user.name = token.name;\n        session.user.avatar = token.avatar;\n        session.user.status = token.status;\n        session.user.roleId = token.roleId;\n        session.user.roleName = token.roleName;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/signin',\n  },\n};\n\nexport default authOptions;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/probi/Desktop/Proj/Github_codes/nextjs/app/api/user-management/settings/notifications/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { getClientIP } from '@/lib/api';\nimport { prisma } from '@/lib/prisma';\nimport { systemLog } from '@/services/system-log';\nimport { NotificationSettingsSchema } from '@/app/(protected)/user-management/settings/forms/notification-settings-schema';\nimport authOptions from '@/app/api/auth/[...nextauth]/auth-options';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session) {\n      return NextResponse.json(\n        { message: 'Unauthorized request' },\n        { status: 401 }, // Unauthorized\n      );\n    }\n\n    const clientIp = getClientIP(request);\n    const settings = await prisma.systemSetting.findFirst();\n    if (!settings) {\n      return NextResponse.json(\n        { message: 'Settings not found.' },\n        { status: 404 },\n      );\n    }\n\n    // Parse the request body\n    const body = await request.json();\n    const parsedData = NotificationSettingsSchema.safeParse(body);\n    if (!parsedData.success) {\n      return NextResponse.json(\n        { message: 'Invalid input. Please check your data and try again.' },\n        { status: 400 }, // Bad Request\n      );\n    }\n\n    // Update the settings in the database\n    const updatedSettings = await prisma.systemSetting.update({\n      where: { id: settings.id }, // Adjust based on your logic to fetch the correct setting\n      data: parsedData.data,\n    });\n\n    // Log the event\n    await systemLog({\n      event: 'update',\n      userId: session.user.id,\n      entityId: session.user.id,\n      entityType: 'system.settings',\n      description: 'System notifications updated.',\n      ipAddress: clientIp,\n    });\n\n    // Return success response\n    return NextResponse.json(\n      {\n        message: 'Notification settings updated successfully',\n        data: updatedSettings,\n      },\n      { status: 200 },\n    );\n  } catch {\n    return NextResponse.json(\n      {\n        message: 'An error occurred while updating the notification settings.',\n      },\n      { status: 500 },\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE,6JAAA,CAAA,UAAW;QAElD,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAuB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,CAAA,GAAA,4GAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,SAAS;QACrD,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAsB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,aAAa,uMAAA,CAAA,6BAA0B,CAAC,SAAS,CAAC;QACxD,IAAI,CAAC,WAAW,OAAO,EAAE;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAuD,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,kBAAkB,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YACxD,OAAO;gBAAE,IAAI,SAAS,EAAE;YAAC;YACzB,MAAM,WAAW,IAAI;QACvB;QAEA,gBAAgB;QAChB,MAAM,CAAA,GAAA,2HAAA,CAAA,YAAS,AAAD,EAAE;YACd,OAAO;YACP,QAAQ,QAAQ,IAAI,CAAC,EAAE;YACvB,UAAU,QAAQ,IAAI,CAAC,EAAE;YACzB,YAAY;YACZ,aAAa;YACb,WAAW;QACb;QAEA,0BAA0B;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}